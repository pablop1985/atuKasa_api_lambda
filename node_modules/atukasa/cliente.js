const {
	isNumber
} = require('util');

class Cliente {

	constructor(token, key, aparato, idioma, DB) {
		this.token = token;
		this.key = key;
		this.aparato = aparato;
		this.idioma = idioma;
		this.DB = DB;
		this.datos = {};
		this.crypto = require('crypto');
		this.algoritmo = 'aes-192-cbc';
	}

	resultadobase = {
		estado: 0,
		texto: '',
		codigo: 200,
		datos: []
	};

	cargarDatos = async function() {
		let vuelta = false;

		let consulta = {
			text: "SELECT * FROM clientes WHERE id = $1",
			values: [this.datos.id]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {
				let datos = res.rows[0];
				datos.key = this.key;
				this.datos = datos;
				vuelta = true;
			} else {
				vuelta = false;
			}
		});

		return vuelta;
	}

	generarToken = async function(datos) {
		const iv = Buffer.alloc(16, 0);
		const cipher = this.crypto.createCipheriv(this.algoritmo, 'XXXXX', iv);
		let encrypted = cipher.update(JSON.stringify(datos), 'utf8', 'hex');
		encrypted += cipher.final('hex');
		console.log(encrypted);
		this.token = encrypted;
		datos.contrasena = '';
		datos.token = this.token;
		return datos;
	}

	comprobarToken = async function() {
		const iv = Buffer.alloc(16, 0);
		const decipher = this.crypto.createDecipheriv(this.algoritmo, 'XXXXX', iv);
		let decrypted = decipher.update(this.token, 'hex', 'utf8');
		decrypted += decipher.final('utf8');

		let datos = JSON.parse(decrypted);
		console.log(datos);
		if (datos.id !== undefined) {
			if (datos.key == this.key) {
				let consulta = {
					text: "SELECT * FROM clientes WHERE email = $1 AND contrasena = $2 AND id = $3 AND validado;",
					values: [datos.email, datos.contrasena, datos.id]
				}

				await this.DB.query(consulta).then(async(res) => {
					if (res.rows.length == 1) {
						datos = res.rows[0];
						datos.key = this.key;
						this.datos = datos;
						console.log('token ok');
						datos.token = this.token;
					} else {
						console.log('token caducado');
						datos.token = '';
					}
				});
			} else {
				console.log('token ko');
				datos.token = '';
			}

			datos.contrasena = '';
			return datos;
		} else {
			return {};
		}
	}

	login = async function(email, contrasena) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'login';
		resultado.codigo = 201;

		console.log('Funcion login cliente - ' + email + ' | ' + contrasena);

		if (this.token == '') {
			let consulta = {
				text: "SELECT * FROM clientes WHERE email = trim(lower($1)) AND contrasena = encode(sha256($2), 'hex') AND validado;",
				values: [email, contrasena]
			}

			await this.DB.query(consulta).then(async(res) => {
				if (res.rows.length == 1) {
					this.datos = resultado.datos = res.rows[0];
					resultado.datos = res.rows[0];
					resultado.datos.key = this.key;
					resultado.estado = 1;
					resultado.texto = "USUARIO LOGUEADO";

					await this.generarToken(resultado.datos).then(result => {
						resultado.datos = result;
					});

					resultado.sqs = {
						componente: 'cliente',
						function: 'login',
						cliente: res.rows[0].id,
						aparato: this.aparato,
					};


				} else {
					resultado.texto = "EL USUARIO NO EXISTE";
					resultado.estado = 0;
					resultado.datos = [];
				}

			}).catch((err) => {
				resultado.texto = "EL USUARIO NO EXISTE: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			return this.comprobar();
		}

		return resultado;
	}

	comprobar = async function() {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'comprobar';
		resultado.codigo = 202;

		console.log('Funcion comprobar cliente - ' + this.token);

		if (this.token != '') {
			let comprobacion = {};
			await this.comprobarToken().then(result => {
				comprobacion = result;
			});
			if (comprobacion.token !== '') {
				resultado.estado = 1;
				resultado.codigo = 1;
				resultado.texto = "USUARIO YA LOGUEADO";
				resultado.datos = comprobacion;
			} else {
				resultado.estado = 0;
				resultado.codigo = 0;
				resultado.texto = "TOKEN INVALIDO";
				resultado.datos = {};
			}

		} else {
			resultado.estado = 0;
			resultado.codigo = 0;
			resultado.texto = "NO HAY TOKEN";
			resultado.datos = {};
		}

		return resultado;
	}

	registro = async function(datos) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'registro';
		resultado.codigo = 203;

		console.log('Funcion registrarcliente - ' + datos.email);

		let consulta = {
			text: "INSERT INTO clientes(nombre, direccion, telefono, email, provincia, poblacion, cp, contrasena) VALUES($1, $2, $3, lower($4), $5, $6, $7, $8) RETURNING id;",
			values: [datos.nombre, datos.direccion, datos.telefono, datos.email, datos.provincia, datos.poblacion, datos.cp, datos.contrasena]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {

				consulta = {
					text: "INSERT INTO notificaciones(tipo, destino, relacion, parametros, aparato) VALUES($1, lower($2), $3, $4, $5)",
					values: [1, datos.email, res.rows[0].id, {
						nombre: datos.nombre
					}, this.aparato]
				}

				await this.DB.query(consulta).then(async(res2) => {
					resultado.texto = "USUARIO REGISTRADO, COMPRUEBE EMAIL";
					resultado.estado = 1;
					resultado.datos = {
						id: res.rows[0].id
					};
					resultado.sqs = {
						componente: 'cliente',
						function: 'registro',
						cliente: res.rows[0].id,
						aparato: this.aparato,
					};
				}).catch(async(error) => {
					consulta = {
						text: "DELETE FROM clientes WHERE id = $1",
						values: [res.rows[0].id]
					}
					await this.DB.query(consulta).then(async(res2) => {
						resultado.texto = "USUARIO REGISTRADO, FALLO EMAIL " + error;
						resultado.estado = 0;
						resultado.datos = [];
					});
				});
			} else {
				resultado.texto = "YA EXISTE UN USUARIO CON ESE EMAIL O FALTAN DATOS";
				resultado.estado = 0;
				resultado.datos = [];
			}

		}).catch((err) => {
			resultado.texto = "EL USUARIO NO EXISTE: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	editar = async function(datos) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'editar';
		resultado.codigo = 204;

		console.log('Funcion editar cliente - ' + datos.id);

		let consulta = {
			text: "UPDATE clientes SET id = id"
		}

		Object.entries(datos).forEach(elemento => {
			consulta.text = consulta.text + ", " + elemento[0] + " = $$" + elemento[1] + "$$";
		});

		consulta.text += ' WHERE id = ' + this.datos.id + ' RETURNING *';

		console.log(consulta);

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {

				resultado.datos = res.rows[0];
				resultado.datos.key = this.key;
				resultado.estado = 1;
				resultado.texto = "USUARIO ACTUALIZADO";

				await this.generarToken(resultado.datos).then(result => {
					resultado.datos = result;
				});

				resultado.sqs = {
					componente: 'cliente',
					function: 'editar',
					cliente: this.datos.id,
					cambios: datos
				};
			} else {
				resultado.texto = "EDICION INCORRECTA";
				resultado.estado = 0;
				resultado.datos = [];
			}

		}).catch((err) => {
			resultado.texto = "EL USUARIO NO EXISTE: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	recuperarContrasena = async function(datos) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'recuperarContrasena';
		resultado.codigo = 205;

		console.log('Funcion recuperar contraseña- ' + datos.email);

		let consulta = {
			text: "SELECT * FROM clientes WHERE email = lower($1) AND NOT EXISTS(SELECT id FROM notificaciones WHERE relacion = clientes.id AND tipo = 2 AND fecha >= CURRENT_TIMESTAMP - '24 hours'::INTERVAL);",
			values: [datos.email]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {
				consulta = {
					text: "INSERT INTO notificaciones(tipo, destino, relacion, parametros, aparato) VALUES($1, lower($2), $3, $4, $5)",
					values: [2, datos.email, res.rows[0].id, {
						nombre: res.rows[0].nombre
					}, this.aparato]
				}

				await this.DB.query(consulta).then(async(res2) => {
					resultado.texto = "CORREO ENVIADO";
					resultado.estado = 1;
					resultado.datos = {};
				}).catch(async(error2) => {
					resultado.texto = "ERROR RECUPERANDO CONTRASEÑA " + error2;
					resultado.estado = 0;
					resultado.datos = [];
				});
			} else {
				resultado.texto = "ERROR RECUPERANDO CONTRASEÑA";
				resultado.estado = 0;
				resultado.datos = [];
			}


		}).catch(async(error) => {
			resultado.texto = "ERROR RECUPERANDO CONTRASEÑA " + error;
			resultado.estado = 0;
			resultado.datos = [];
		});

		return resultado;
	}

	validarRecuperacion = async function(clave) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'validarRecuperacion';
		resultado.codigo = 206;

		console.log('Funcion recuperacion contrasena cliente - ' + clave);

		if (this.token == '') {
			let consulta = {
				text: "SELECT cl.* FROM clientes cl INNER JOIN notificaciones n ON cl.id = n.relacion AND n.tipo = '2' AND n.clave = $1 AND not n.procesado",
				values: [clave]
			}

			await this.DB.query(consulta).then(async(res) => {
				if (res.rows.length == 1) {
					this.datos = res.rows[0];
					resultado.datos = res.rows[0];
					resultado.datos.key = this.key;
					resultado.estado = 1;
					resultado.texto = "USUARIO LOGUEADO";

					await this.generarToken(resultado.datos).then(async(result) => {
						resultado.datos = result;
						consulta = {
							text: "UPDATE notificaciones SET procesado = true WHERE tipo = '2' AND clave = $1 AND not procesado",
							values: [clave]
						}
						await this.DB.query(consulta);
					});

				} else {
					resultado.texto = "LA NOTIFICACION NO EXISTE";
					resultado.estado = 0;
					resultado.datos = [];
				}

			}).catch((err) => {
				resultado.texto = "LA NOTIFICACION NO EXISTE: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			return this.comprobar();
		}

		return resultado;
	}

	validarAlta = async function(clave) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'validarAlta';
		resultado.codigo = 207;

		console.log('Funcion clave alta cliente - ' + clave);

		if (this.token == '') {
			let consulta = {
				text: "SELECT cl.* FROM clientes cl INNER JOIN notificaciones n ON cl.id = n.relacion AND n.tipo = '1' AND n.clave = $1 AND NOT n.procesado AND NOT cl.validado",
				values: [clave]
			}

			await this.DB.query(consulta).then(async(res) => {
				if (res.rows.length == 1) {
					consulta = {
						text: "UPDATE clientes SET validado = true WHERE NOT validado AND id = $1",
						values: [res.rows[0].id]
					}
					await this.DB.query(consulta).then(async(resu) => {
						this.datos = rews.rows[0];
						resultado.datos = res.rows[0];
						resultado.datos.key = this.key;
						resultado.estado = 1;
						resultado.texto = "USUARIO LOGUEADO";

						await this.generarToken(resultado.datos).then(async(result) => {
							resultado.datos = result;
							consulta = {
								text: "UPDATE notificaciones SET procesado = true WHERE tipo = '1' AND clave = $1 AND not procesado;",
								values: [clave]
							}
							await this.DB.query(consulta);
						});

						resultado.sqs = {
							componente: 'cliente',
							function: 'validar',
							cliente: res.rows[0].id,
							aparato: this.aparato
						};
					});
				} else {
					resultado.texto = "LA NOTIFICACION NO EXISTE";
					resultado.estado = 0;
					resultado.datos = [];
				}

			}).catch((err) => {
				resultado.texto = "LA NOTIFICACION NO EXISTE: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			return this.comprobar();
		}

		return resultado;
	}

	anadirDireccion = async function(parametros) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'anadirDireccion';
		resultado.codigo = 208;

		console.log('Funcion alta direccion cliente - ' + parametros);


		let consulta = {
			text: "INSERT INTO clientes_direcciones(cliente, provincia, poblacion, cp, direccion, nombre, destinatario) VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING *",
			values: [this.datos.id, parametros.provincia, parametros.poblacion, parametros.cp, parametros.direccion, parametros.nombre, parametros.destinatario]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {
				resultado.texto = "DIRECCION AÑADIDA";
				resultado.estado = 1;
				resultado.datos = res.rows[0];
				resultado.datos.key = this.key;

				resultado.sqs = {
					componente: 'cliente',
					function: 'anadirDireccion',
					cliente: this.datos.id,
					aparato: this.aparato,
					direccion: res.rows[0].id
				};

			} else {
				resultado.texto = "NO SE HA PODIDO INSERTAR LA DIRECCION";
				resultado.estado = 0;
				resultado.datos = [];
			}

		}).catch((err) => {
			resultado.texto = "NO SE HA PODIDO INSERTAR LA DIRECCION: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	editarDireccion = async function(datos) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'editarDireccion';
		resultado.codigo = 209;

		console.log('Funcion editar direccion cliente - ' + datos.id);

		let consulta = {
			text: "UPDATE clientes_direcciones SET id = id"
		}

		Object.entries(datos).forEach(elemento => {
			if (elemento[0] != 'id') {
				consulta.text = consulta.text + ", " + elemento[0] + " = $$" + elemento[1] + "$$";
			}
		});

		consulta.text += ' WHERE id = ' + datos.id + ' AND cliente = ' + this.datos.id + ' RETURNING *';

		console.log(consulta);

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {

				resultado.datos = res.rows[0];
				resultado.datos.key = this.key;
				resultado.estado = 1;
				resultado.texto = "DIRECCION ACTUALIZADA";

				await this.generarToken(resultado.datos).then(result => {
					resultado.datos = result;
				});

				resultado.sqs = {
					componente: 'cliente',
					function: 'editarDireccion',
					cliente: this.datos.id,
					aparato: this.aparato,
					direccion: datos.id
				};
			} else {
				resultado.texto = "EDICION DE DIRECCION INCORRECTA";
				resultado.estado = 0;
				resultado.datos = [];
			}

		}).catch((err) => {
			resultado.texto = "ERROR ACTUALIZANDO DIRECCION: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	borrarDireccion = async function(id) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'borrarDireccion';
		resultado.codigo = 210;

		console.log('Funcion clave borrar direccion cliente - ' + id);


		let consulta = {
			text: "DELETE FROM clientes_direcciones WHERE cliente = $1 AND id = $2",
			values: [this.datos.id, id]
		}

		await this.DB.query(consulta).then(async(res) => {
			resultado.texto = "DIRECCION BORRADA";
			resultado.estado = 1;
			resultado.datos = [];
			resultado.datos.key = this.key;

			resultado.sqs = {
				componente: 'cliente',
				function: 'validar',
				cliente: this.datos.id,
				aparato: this.aparato,
				direccion: id
			};
		}).catch((err) => {
			resultado.texto = "NO SE HA PODIDO BORRAR LA DIRECCION: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	listarDirecciones = async function() {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'listarDirecciones';
		resultado.codigo = 211;

		console.log('Funcion listar direcciones cliente - ' + this.token);

		let consulta = {
			text: "SELECT * FROM vista_clientes_direcciones WHERE cliente = $1",
			values: [this.datos.id]
		}


		await this.DB.query(consulta).then(async(res) => {
			resultado.texto = "DIRECCIONES DISPONIBLES";
			resultado.estado = 1;
			resultado.datos = res.rows;
			resultado.datos.key = this.key;
		}).catch((err) => {
			resultado.texto = "NO SE HA PODIDO LISTAR LAS DIRECCIONES: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	notificacionVenta = async function(venta) {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'notificacionVenta';
		resultado.codigo = 212;

		console.log('Funcion notificacion venta - ' + venta);

		let consulta = {
			text: "INSERT INTO notificaciones(tipo, destino, relacion, parametros, aparato) VALUES($1, lower($2), $3, $4, $5)",
			values: [3, this.datos.email, venta, {
				nombre: this.datos.nombre
			}, this.aparato]
		}

		await this.DB.query(consulta).then(async(res2) => {
			console.log("NOTIFICACION VENTA LISTA");
			resultado.texto = "CORREO ENVIADO";
			resultado.estado = 1;
			resultado.datos = {};

			resultado.sqs = {
				componente: 'cliente',
				function: 'notificacionVenta',
				cliente: this.datos.id,
				aparato: this.aparato,
				venta: venta
			};

		}).catch(async(error2) => {
			console.log("NOTIFICACION VENTA FALLIDA: " + error2);
			resultado.texto = "ERROR RECUPERANDO CONTRASEÑA " + error2;
			resultado.estado = 0;
			resultado.datos = [];
		});

		return resultado;
	}

	listarVentas = async function(parametros) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'listarVentas';
		resultado.codigo = 213;

		console.log('Funcion listar ventas cliente - ' + this.token);

		let consulta = {
			text: "SELECT count(id) as contar FROM vista_clientes_historico WHERE cliente = $1 AND aparato = $2 AND idioma = $3",
			values: [this.datos.id, this.aparato, this.idioma]
		}


		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length == 1) {
				if (res.rows[0].contar > 0) {
					let cuantos = parametros.items !== undefined && isNumber(parametros.items) ? parametros.items : 10;
					let desde = parametros.pagina !== undefined && isNumber(parametros.pagina) ? (parametros.pagina - 1) * cuantos : 0;
					consulta = {
						text: "SELECT * FROM vista_clientes_historico WHERE cliente = $1 AND aparato = $2 AND idioma = $3 ORDER BY fecha DESC LIMIT $4 OFFSET $5",
						values: [this.datos.id, this.aparato, this.idioma, cuantos, desde]
					}
					await this.DB.query(consulta).then(async(resu) => {
						resultado.texto = "PAGINA " + (desde + 1) + " DE VENTAS";
						resultado.estado = 1;
						resultado.datos = {};
						resultado.datos.listado = resu.rows;
						resultado.datos.paginas = Math.ceil(res.rows[0].contar / cuantos);
						resultado.datos.items = res.rows[0].contar;
					}).catch((err) => {
						resultado.texto = "NO SE HA PODIDO LISTAR LAS VENTAS: " + err;
						resultado.estado = 0;
						resultado.datos = [];
					});
				} else {
					resultado.texto = "NO HAY VENTAS";
					resultado.estado = 1;
					resultado.datos = [];
				}
			} else {
				resultado.texto = "NO SE HA PODIDO CONTAR LAS VENTAS";
				resultado.estado = 0;
				resultado.datos = [];
			}
		}).catch((err) => {
			resultado.texto = "NO SE HA PODIDO CONTAR LAS VENTAS: " + err;
			resultado.estado = 0;
			resultado.datos = [];

		});

		return resultado;
	}

	verDetallesVenta = async function(venta) {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'cliente';
		resultado.funcion = 'verDetallesVenta';
		resultado.codigo = 214;

		console.log('Funcion listar una venta de cliente - ' + this.token);

		let consulta = {
			text: "SELECT * FROM vista_venta_detalles_reparto WHERE id_venta = $1 AND id_aparato = $2 AND id_cliente = $3 AND id_idioma = $4",
			values: [venta, this.aparato, this.datos.id, this.idioma]
		};

		await this.DB.query(consulta).then(async(res) => {
			resultado.texto = "DATOS VENTA";
			resultado.estado = 1;
			resultado.datos = res.rows;
		}).catch((err) => {
			resultado.texto = "ERROR LISTANDO DATOS VENTA: " + err;
			resultado.estado = 0;
			resultado.datos = [];
		});

		return resultado;
	}
}

module.exports = Cliente;