class Venta {
	constructor(id, cliente, aparato, idioma, DB) {
		this.cliente = cliente;
		this.aparato = aparato;
		this.idioma = idioma;
		this.detalles = [];
		this.id = id;
		this.DB = DB;
		this.redsys = {},
			this.datos_redsys = {};
	}

	resultadobase = {
		estado: 0,
		texto: '',
		codigo: 300,
		datos: []
	};

	comprobarDetalles = async function(detalles) {
		let resultado = 0;

		let consulta = {
			text: "SELECT count(c.id) as contar FROM carrito c INNER JOIN tiendas_productos p ON c.unidades <= (CASE WHEN p.stock_ilimitado THEN 9999 ELSE p.stock END) AND c.producto = p.id AND p.activo INNER JOIN tiendas t ON t.id = p.tienda INNER JOIN tiendas_aparatos ta ON ta.tienda = t.id AND ta.aparato = $2 WHERE c.id = ANY($1) AND c.cliente = $3",
			values: [detalles, this.aparato, this.cliente]
		}

		console.log('Funcion venta comprobar detalles');

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows[0].contar == detalles.length) {
				resultado = 1;
			}
		}).catch((err) => {
			console.log(err);
		});

		return resultado;
	}

	comprobarVenta = async function(pago = false) {
		let consulta = {
			text: "SELECT count(c.id) as contar, count(c.id) FILTER(WHERE c.unidades <= (CASE WHEN p.stock_ilimitado THEN 9999 ELSE p.stock END)) as contar_validos FROM ventas_detalles c INNER JOIN ventas v ON v.id = c.venta INNER JOIN tiendas_productos p ON c.producto = p.id AND p.activo INNER JOIN tiendas t ON t.id = p.tienda INNER JOIN tiendas_aparatos ta ON ta.tienda = t.id AND ta.aparato = $2 WHERE v.id = $1 AND v.cliente = $3 AND v.estado = $4",
			values: [this.id, this.aparato, this.cliente, pago ? 1 : 0]
		}

		let resultado = 0;
		console.log('Funcion venta comprobar');

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows[0].contar == res.rows[0].contar_validos && res.rows[0].contar_validos > 0) {
				resultado = 1;
			}
		}).catch((err) => {
			console.log(err);
		});

		console.log("RESULTADO COMPROBACION VENTA: " + resultado);

		return resultado;
	}

	crear = async function(detalles = []) {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'crear';
		resultado.codigo = 301;
		console.log('Funcion crear venta');

		let ok = 0;

		ok = await this.comprobarDetalles(detalles);

		if (ok == 1) {
			let consulta = {
				text: "INSERT INTO ventas(aparato, cliente, ultimo_usuario) VALUES($1, $2, 0) RETURNING id;",
				values: [this.aparato, this.cliente]
			};

			await this.DB.query(consulta).then(async(res) => {
				if (res.rows.length == 1) {
					let venta = res.rows[0].id;

					consulta = {
						text: "INSERT INTO ventas_detalles(venta, producto, unidades, importe, iva, carrito) SELECT $1 as venta, c.producto, c.unidades, p.precio, i.tipo, c.id as carrito FROM carrito c INNER JOIN tiendas_productos p ON p.id = c.producto INNER JOIN iva_tipos i ON i.id = p.tipo_iva WHERE c.id = ANY($2) AND c.cliente = $3 AND c.aparato = $4 RETURNING id",
						values: [venta, detalles, this.cliente, this.aparato]
					};

					console.log(consulta);

					await this.DB.query(consulta).then(async(resu) => {
						resultado.texto = "CARRITO INSERTADO";
						resultado.estado = 1;
						resultado.datos = {
							venta: venta
						};

						resultado.sqs = {
							componente: 'venta',
							function: 'crear',
							cliente: this.cliente,
							aparato: this.aparato,
							id: venta
						};

					}).catch((err) => {
						console.log(err);
						resultado.texto = "ERROR INSERTANDO DETALLE: " + err;
						resultado.estado = 0;
						resultado.datos = [];
						ok = 0;
					});
				} else {
					resultado.texto = "ERROR INSERTANDO VENTA";
				}
			}).catch((err) => {
				resultado.texto = "ERROR INSERTANDO VENTA: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			resultado.texto = "DETALLE ERRÓNEO " + ok;
		}

		return resultado;
	}

	listarDirecciones = async function() {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'listarDirecciones';
		resultado.codigo = 302;
		console.log('Funcion venta listar direcciones');

		let consulta = {
			text: "SELECT v.* FROM vista_clientes_direcciones v INNER JOIN aparatos_codigos_postales c ON v.cp = c.cp AND v.cliente = $1 AND c.aparato = $2",
			values: [this.cliente, this.aparato]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length > 0) {
				resultado.texto = "DIRECCIONES VALIDAS";
				resultado.estado = 1;
				resultado.datos = res.rows;
			} else {
				resultado.texto = "NO HAY DIRECCIONES";
				resultado.estado = 1;
				resultado.datos = [];
			}
		}).catch((err) => {
			console.log(err);
		});

		return resultado;
	}

	listarRepartos = async function() {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'listarRepartos';
		resultado.codigo = 303;
		console.log('Funcion venta listar reparto');

		let consulta = {
			text: `SELECT 
                        r.id, 
                        tr.nombre, 
                        (r.importe+r.tienda_extra*(count(distinct(t.id))-1)) as importe
                    FROM
                        aparatos_repartos r
                        INNER JOIN envio_tipos tr
                        ON tr.id = r.tipo
                        INNER JOIN aparatos a
                        ON a.id = r.aparato
                        INNER JOIN ventas_detalles vd
                        ON vd.venta = $1
                        INNER JOIN tiendas_productos tp
                        ON tp.id = vd.producto
                        INNER JOIN tiendas t
                        ON t.id = tp.tienda
                    WHERE a.id = $2
                    AND r.activo
                    GROUP BY r.id,
                    tr.nombre`,
			values: [this.id, this.aparato]
		}

		await this.DB.query(consulta).then(async(res) => {
			if (res.rows.length > 0) {
				resultado.texto = "ENVIOS VALIDOS";
				resultado.estado = 1;
				resultado.datos = res.rows;
			} else {
				resultado.texto = "NO HAY ENVIOS POSIBLES";
				resultado.estado = 0;
				resultado.datos = [];
			}
		}).catch((err) => {
			resultado.texto = "NO HAY ENVIOS POSIBLES. ERROR: " + err;
			resultado.estado = 0;
			resultado.datos = [];
			console.log(err);
		});

		return resultado;
	}

	asignarReparto = async function(reparto, direccion, texto = "") {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'asignarReparto';
		resultado.codigo = 304;
		console.log('Funcion venta asignar reparto');

		let ok = 0;

		ok = await this.comprobarVenta();

		if (ok == 1) {
			let consulta = {
				text: `
                    INSERT INTO ventas_repartos(venta, importe, direccion, reparto, ultimo_usuario)
                    SELECT 
                        vd.venta as venta,
                        (r.importe+r.tienda_extra*(count(distinct(t.id))-1)) as importe,
                        $4 as direccion,
						r.id as reparto,
						0 as ultimo_usuario
                    FROM
                        aparatos_repartos r
                        INNER JOIN envio_tipos tr
                        ON tr.id = r.tipo
                        INNER JOIN aparatos a
                        ON a.id = r.aparato
                        INNER JOIN ventas_detalles vd
                        ON vd.venta = $2
                        INNER JOIN tiendas_productos tp
                        ON tp.id = vd.producto
                        INNER JOIN tiendas t
                        ON t.id = tp.tienda
                    WHERE a.id = $1
                    AND r.id = $3
                    AND r.activo
                    GROUP BY r.id,
                    vd.venta,
                    tr.nombre
                `,
				values: [this.aparato, this.id, reparto, direccion]
			};

			await this.DB.query(consulta).then(async(res) => {
				if (texto != "") {
					let com = await this.anadirComentarioCliente(texto);
					if (com.estado == 1) {
						resultado.texto = "REPARTO INSERTADO";
						resultado.estado = 1;
						resultado.datos = [];

						resultado.sqs = {
							componente: 'venta',
							function: 'asignarReparto',
							cliente: this.cliente,
							aparato: this.aparato,
							id: this.id,
							reparto: reparto,
							direccion: direccion
						};
					} else {
						resultado.texto = com.texto;
						resultado.estado = 0;
						resultado.datos = [];
					}
				} else {
					resultado.texto = "REPARTO INSERTADO";
					resultado.estado = 1;
					resultado.datos = [];
				}
			}).catch((err) => {
				resultado.texto = "ERROR INSERTANDO REPARTO: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			resultado.texto = "DETALLE ERRÓNEO " + ok;
		}

		return resultado;
	}

	anadirComentarioCliente = async function(texto) {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'anadirComentarioCliente';
		resultado.codigo = 308;
		console.log('Funcion venta anadir comentario');

		let ok = 0;

		ok = await this.comprobarVenta();

		if (ok == 1) {
			let consulta = {
				text: `
                    INSERT INTO ventas_comentarios(venta, texto, ultimo_usuario)
                    VALUES($1, $2, 0)
                `,
				values: [this.id, texto]
			};

			await this.DB.query(consulta).then(async(res) => {
				resultado.texto = "COMENTARIO INSERTADO";
				resultado.estado = 1;
				resultado.datos = [];

				resultado.sqs = {
					componente: 'venta',
					function: 'anadirComentarioCliente',
					cliente: this.cliente,
					aparato: this.aparato,
					id: this.id,
					comentario: texto
				};

			}).catch((err) => {
				resultado.texto = "ERROR INSERTANDO COMENTARIO: " + err;
				resultado.estado = 0;
				resultado.datos = [];

			});
		} else {
			resultado.texto = "DETALLE ERRÓNEO " + ok;
		}

		return resultado;
	}

	resumen = async function(confirmar = false) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'resumen';
		resultado.codigo = 305;
		console.log('Funcion venta resumen con confirmar: ' + confirmar);

		let ok = 0;
		let consulta = {};

		ok = await this.comprobarVenta();

		if (ok == 1) {
			if (confirmar) {
				consulta = {
					text: "UPDATE ventas SET estado = 1, ultimo_usuario = 0 WHERE id = $1 AND aparato = $2 RETURNING *",
					values: [this.id, this.aparato]
				};

				await this.DB.query(consulta).then(async(res) => {
					resultado.texto = "VENTA CONFIRMADA";
					resultado.estado = 1;
					resultado.datos = res.rows[0];

					resultado.sqs = {
						componente: 'venta',
						function: 'confirmar',
						cliente: this.cliente,
						aparato: this.aparato,
						id: this.id
					};

				}).catch((err) => {
					resultado.texto = "ERROR CONFIRMANDO VENTA: " + err;
					resultado.estado = 0;
					resultado.datos = [];
				});
			} else {
				consulta = {
					text: "SELECT * FROM vista_venta_detalles_reparto WHERE id_venta = $1 AND id_aparato = $2 AND id_idioma = $3",
					values: [this.id, this.aparato, this.idioma]
				};

				await this.DB.query(consulta).then(async(res) => {
					resultado.texto = "DATOS VENTA";
					resultado.estado = 1;
					resultado.datos = res.rows;
				}).catch((err) => {
					resultado.texto = "ERROR LISTANDO DATOS VENTA: " + err;
					resultado.estado = 0;
					resultado.datos = [];
				});
			}

		} else {
			resultado.texto = "VENTA ERRÓNEA " + ok;
		}

		return resultado;
	}

	descartar = async function() {

		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'descartar';
		resultado.codigo = 306;
		console.log('Funcion venta descartar');

		resultado.componente = 'venta';
		resultado.funcion = 'descartar';
		console.log('Funcion descartar venta');


		let consulta = {
			text: "UPDATE ventas SET estado = 2, ultimo_usuario = 0 WHERE estado = 0 AND id = $1 AND aparato = $2 AND cliente = $3",
			values: [this.id, this.aparato, this.cliente]
		}

		await this.DB.query(consulta).then(async(res) => {
			resultado.texto = "VENTA DESCARTADA";
			resultado.estado = 1;

			resultado.sqs = {
				componente: 'venta',
				function: 'descartar',
				cliente: this.cliente,
				aparato: this.aparato,
				id: this.id
			};

		}).catch((err) => {
			resultado.texto = "ERROR DESCARTANDO VENTA: " + err;
		});

		return resultado;
	}

	pagar = async function(metodo, estado, cliente) {
		let resultado = Object.assign({}, this.resultadobase);

		resultado.componente = 'venta';
		resultado.funcion = 'pagar';
		resultado.codigo = 307;
		console.log('Funcion pagar venta');

		let ok = await this.comprobarVenta(true);
		console.log("VENTA COMPROBADA");
		if (ok == 1) {

			let pago = estado ? 2 : 3;

			let consulta = {
				text: "UPDATE ventas SET estado = $2, metodo = $3, ultimo_usuario = 0 WHERE estado = 1 AND id = $1 AND aparato = $4 AND cliente = $5 RETURNING *",
				values: [this.id, pago, metodo, this.aparato, cliente.datos.id]
			}

			await this.DB.query(consulta).then(async(res) => {
				resultado.estado = 1;
				if (estado) {
					resultado.texto = "VENTA PAGADA";
					await cliente.notificacionVenta(this.id);

					resultado.sqs = {
						componente: 'venta',
						function: 'pagar',
						cliente: this.cliente,
						aparato: this.aparato,
						id: this.id,
						estado: pago,
						metodo: metodo
					};

				} else {
					resultado.texto = "VENTA NO PAGADA";
				}

			}).catch((err) => {
				resultado.texto = "ERROR PAGANDO VENTA: " + err;
			});

		} else {
			resultado.texto = "ERROR COMPROBANDO VENTA";
		}

		return resultado;

	}
}

module.exports = Venta;